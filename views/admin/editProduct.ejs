<%- include("../partials/admin/header.ejs")%>
<div id="page-wrapper">
  <div class="header">
   <h1 class="page-header">Edit Product</h1>
    <ol class="breadcrumb">
      <li><a href="#">Home</a></li>
      <li><a href="#">Product Management</a></li>
      <li class="active">Edit Product</li>
    </ol>
  </div>
  <div id="page-inner">
    <div class="row">
      <div class="col-lg-12">
        <div class="card">
          <div class="card-action">Edit Product Details</div>
          <div class="card-content">
            <form class="col s12" action="/admin/editProduct" method="post" enctype="multipart/form-data" id="editProductForm">
              <div class="row">
                <div class="input-field col s6">
                  <input type="hidden" value="<%=product._id%>" id="productId" name="productId">
                  <input
                    id="productName"
                    type="text"
                    class="validate"
                    name="productName"
                    value="<%=product.productName%>"
                  />
                  <span id="error1" class="error-message"></span>
                  <label for="productName">Product Name</label>
                </div>
                <div class="input-field col s6">
                  <input
                    id="price"
                    type="number"
                    class="validate"
                    name="price"
                    value="<%=product.price%>"
                  />
                  <span id="error2" class="error-message"></span>
                  <label for="price">Price</label>
                </div>
              </div>
              <div class="row">
                <div class="input-field col s12">
                  <input id="description" type="text" class="validate" name="description" value="<%=product.description%>"/>
                  <span id="error3" class="error-message"></span>
                  <label for="description">Description</label>
                </div>
              </div>
              <div class="row">
                <h3 class="pm-variant-heading">Offer</h3>
                <div class="input-field col s12">
                    
                    <select id="offer" name="offerType" style="display: block;">
                        <option value="" <%=(!product.offer)?"selected":""%>>No offer</option>
                        <option value="percentage"  <%=(product.offer?.type==="percentage")?"selected":""%>>Percentage</option>
                        <option value="flat" <%=(product.offer?.type==="flat")?"selected":""%>>Flat</option>
                    </select>
                    <input type="number" name="offerValue" placeholder="Offer Value" id="offervalue" value="<%=product.offer.value%>" disabled>
                    <input type="date" name="offerStartDate" placeholder="From date" id="offerstartdate" value="<%=product.offer.startDate%>" disabled>
                    <input type="date" name="offerEndDate" placeholder="Expires at" id="offerenddate" value="<%=product.offer.endDate%>" disabled>
                </div>  
             </div>
              <div class="row">
                <label for="selected images">Selected images</label>
                <% for(let i=0;i<images.length;i++){ %>
                  <div class="col-md-12" style="display: block;">
                    <div class="mb-4" style="display: block;">
                      <td>
                        <input type="hidden" name="" id="imageDatas" value="<%=product.images[i]%>">
                        <img src="/uploads/<%=images[i]%>" alt="product image<%=i%>" >
                        <div class="row">
                          <div class="col s12">
                            <div class="input-field inline">
                              <button class="deleteImages"> 
                                <a href="/admin/deleteImage?imageid=<%=product.images[i]%>&productid=<%=product._id%>">Delete Image</a>
                              </button> 
                            </div>
                          </div>
                        </div>

                      </td>
                    </div>
                  </div>
                  <%}%>
              </div>
              <div class="row">
                <label class="pm-label" for="pm-images"
                  >Product Images (Minimum 3)</label
                >
                <input
                  class="pm-input-file"
                  type="file"
                  id="pm-images"
                  name="productImage"
                  accept="image/*"
                  multiple
                />
                <div id="imagesToCrop"></div>
                           <div id="imagePreview" class="img-preview"></div>
              </div>
              <div id="cropperModal" class="modal" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
                <div class="modal-content" style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 600px;">
                   <h4>Crop Image</h4>
                   <div id="cropperContainer" style="max-width: 100%; max-height: 70vh;">
                      <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                   </div>
                   <button id="cropButton" class="btn" style="margin-top: 10px;">Crop</button>
                   <button id="closeModal" class="btn" style="margin-top: 10px; margin-left: 10px;">Close</button>
                </div>
             </div>
              <div class="row">
               
                <div class="input-field col s6">

                  <label style="position: relative" for="category">Category</label>

                 <select style="display: block;" name="category" id="category" >
                    <%for(let i = 0;i<category.length;i++){%>
                      <option value="<%=category[i].categoryName%>"><%=category[i].categoryName%></option>
                      <%}%>                
                    </select>
                  </div>
              </div>

              <!-- Variants Section -->
              <div class="pm-variant-group">
                <h3 class="pm-variant-heading">Variants</h3>
                <div id="variantContainer">
                  <!-- Loop through each variant and render its fields -->
                  <% product.variant.forEach((variant, index) => { %>
                    <div class="variant-block" data-index="<%=index%>">
                      <label class="pm-label">Version</label>
                      <input
                        class="pm-input version-input"
                        type="text"
                        name="variant[<%=index%>][version]"
                        required
                        value="<%=variant.version%>"
                      />
                      <span class="error4 error-message"></span>

                      <label class="pm-label">Stock</label>
                      <input
                        class="pm-input stock-input"
                        type="number"
                        name="variant[<%=index%>][stock]"
                        required
                        value="<%=variant.stock%>"
                      />
                      <span class="error5 error-message"></span>
                      

                      <label class="pm-label">Platform</label>
                      <select
                        name="variant[<%=index%>][platform]"
                        class="pm-input browser-default platform-select"
                        data-index="<%=index%>"
                      >
                        <option value="PC" <%= variant.platform === 'PC' ? 'selected' : '' %>>PC</option>
                        <option value="PS6" <%= variant.platform === 'PS6' ? 'selected' : '' %>>PS6</option>
                        <option value="Steam" <%= variant.platform === 'Steam' ? 'selected' : '' %>>Steam</option>
                        <option value="Xbox" <%= variant.platform === 'Xbox' ? 'selected' : '' %>>Xbox</option>
                      </select>

                      <!-- Delete variant button -->
                      <button type="button" class="delete-variant" data-index="<%=index%>">Delete Variant</button>
                    </div>
                  <% }); %>
                </div>
                <!-- Add Variant Button -->
                <button type="button" id="addVariantBtn">Add Variant</button>
              </div>


              <div class="row">
                <div class="col s12">
                  <div class="input-field inline">
                    <input type="submit" />
                  </div>
                </div>
              </div>
            </form>
            <div class="clearBoth"></div>
          </div>
        </div>
      </div>
    </div> 
  </div>
</div>


    <%- include("../partials/admin/footer.ejs")%>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
    const variantContainer = document.getElementById('variantContainer');
    const addVariantBtn = document.getElementById('addVariantBtn');
    const platforms = ['PC', 'PS6', 'Steam', 'Xbox'];

    function updatePlatformOptions() {
        const selectedPlatforms = Array.from(document.querySelectorAll('.platform-select')).map(select => select.value);
        
        document.querySelectorAll('.platform-select').forEach(select => {
            const currentPlatform = select.value;
            const options = platforms.filter(platform => !selectedPlatforms.includes(platform) || platform === currentPlatform);

            // Clear existing options
            select.innerHTML = '';
            
            // Append the filtered platforms
            options.forEach(platform => {
                const option = document.createElement('option');
                option.value = platform;
                option.textContent = platform;
                if (platform === currentPlatform) {
                    option.selected = true;
                }
                select.appendChild(option);
            });
        });
    }

    // Initial platform update
    updatePlatformOptions();

    // Add a new variant when the button is clicked
    addVariantBtn.addEventListener('click', function () {
        const newIndex = document.querySelectorAll('.variant-block').length;

        const variantBlock = document.createElement('div');
        variantBlock.classList.add('variant-block');
        variantBlock.setAttribute('data-index', newIndex);

        variantBlock.innerHTML = `
            <label class="pm-label">Version</label>
            <input
               class="pm-input variant-input" 
               type="text"
               name="variant[${newIndex}][version]"
               required
            />
            <span class="error5 error-message"></span>
            <label class="pm-label">Stock</label>
            <input
               class="pm-input stock-input"
               type="number"
               name="variant[${newIndex}][stock]"
               required
            /> <span class="error6 error-message"></span>
            <label class="pm-label">Platform</label>
            <select
               name="variant[${newIndex}][platform]"
               class="pm-input browser-default platform-select"
               data-index="${newIndex}"
            ></select>
            <button type="button" class="delete-variant" data-index="${newIndex}">Delete Variant</button>
        `;

        variantContainer.appendChild(variantBlock);
        updatePlatformOptions();
    });

    // Listen for changes in platform selection and update options
    document.body.addEventListener('change', function (e) {
        if (e.target.classList.contains('platform-select')) {
            updatePlatformOptions();
        }
    });

    // Handle deleting a variant
    document.body.addEventListener('click', function (e) {
        if (e.target.classList.contains('delete-variant')) {
            const index = e.target.getAttribute('data-index');
            document.querySelector(`.variant-block[data-index="${index}"]`).remove();
            updatePlatformOptions();
        }
    });
});
document.addEventListener("DOMContentLoaded",function () {
  const nameid = document.getElementById("productName");
      const deletebutton = document.querySelectorAll(".deleteImages")
     
const priceid = document.getElementById("price");
const descriptionid = document.getElementById("description");
const versionid = document.getElementById("version"); // For version
const stockid = document.querySelectorAll('.stockinput') // For stock
const error1 = document.getElementById("error1");
const error2 = document.getElementById("error2");
const error3 = document.getElementById("error3");
const offerSelect = document.getElementById('offer');
  const offerValueInput = document.getElementById('offervalue');
  const offerStartDate = document.getElementById('offerstartdate');
  const offerEndDate = document.getElementById('offerenddate');
  offerSelect.addEventListener('change', function() {
    if (this.value === 'percentage' || this.value === 'flat') {
      offerValueInput.disabled = false;
      offerStartDate.disabled = false;
      offerEndDate.disabled = false;
    } else {
      offerValueInput.disabled = true;
      offerStartDate.disabled = true;
      offerEndDate.disabled = true;
      offerValueInput.value = ''; // Clear the value
      offerStartDate.value = ''; // Clear the dates
      offerEndDate.value = ''; // Clear the dates
    }
  });

// Validate Product Name
function nameValidate() {
    const nameVal = nameid.value;
    const namePattern =  /^(?!\d+$)[a-zA-Z0-9 ]+$/;
    if (nameVal.trim() === "") {
        error1.style.display = "block";
        error1.innerHTML = "Please Enter a Valid Product Name";
        return false;
    } else if (!namePattern.test(nameVal)) {
        error1.style.display = "block";
        error1.innerHTML = "Name can only contain Numbers and Alphabets";
        return false;
    } else {
        error1.style.display = "none";
        return true;
    }
}

// Validate Price
function priceValidate() {
    const priceVal = priceid.value;
    const pricePattern = /^\d+$/;
    if (priceVal.trim() === "") {
        error2.style.display = "block";
        error2.innerHTML = "Please enter a valid price";
        return false;
    } else if (priceVal <= 0) {
        error2.style.display = "block";
        error2.innerHTML = "Please enter a non-negative price";
        return false;
    } else if (!pricePattern.test(priceVal)) {
        error2.style.display = "block";
        error2.innerHTML = "Price can only include numbers";
        return false;
    } else {
        error2.style.display = "none";
        return true;
    }
}

// Validate Description
function descriptionValidate() {
    const descriptionVal = descriptionid.value;
    const wordCount = descriptionVal.trim().split(/\s+/).length; // Split by whitespace and count the words
    
    if (descriptionVal.trim() === "") {
        error3.style.display = "block";
        error3.innerHTML = "Enter a valid description";
        return false;
    } else if (wordCount < 30) {  // Check if the word count is less than 60
        error3.style.display = "block";
        error3.innerHTML = "Description should contain at least 30 words";
        return false;
    } else {
        error3.style.display = "none";
        error3.innerHTML = "";
        return true;
    }
}

// Validate Versions for all variants
function versionValidate() {
    const versions = document.querySelectorAll('.version-input');
    const error4s = document.querySelectorAll('.error4');
    const versionPattern = /^\d+(\.\d+)?$/;
    let allValid = true;

    versions.forEach((versionInput, index) => {
        const versionVal = versionInput.value;
        const error4 = error4s[index];

        if (versionVal.trim() === "") {
            error4.style.display = "block";
            error4.innerHTML = "Please enter a valid version";
            allValid = false;
        } else if (!versionPattern.test(versionVal)) {
            error4.style.display = "block";
            error4.innerHTML = "Version can only include numbers and a dot";
            allValid = false;
        } else {
            error4.style.display = "none";
        }
    });

    return allValid;
}

// Validate Stock for all variants
function stockValidate() {
  console.log("hello");
  
    const stocks = document.querySelectorAll('.stock-input');
    const error5s = document.querySelectorAll('.error5');
    const stockPattern = /^\d+$/;
    let allValid = true;

    stocks.forEach((stockInput, index) => {
        const stockVal = stockInput.value;
        const error5 = error5s[index];
        console.log("hello");
        
        if (stockVal.trim() === "") {
            error5.style.display = "block";
            error5.innerHTML = "Please enter a valid stock amount";
            allValid = false;
        } else if (!stockPattern.test(stockVal)) {
            error5.style.display = "block";
            error5.innerHTML = "Stock can only include numbers";
            allValid = false;
        } else if (parseInt(stockVal) < 0) {
            error5.style.display = "block";
            error5.innerHTML = "Stock cannot be negative";
            allValid = false;
        } else {
            error5.style.display = "none";
        }
    });

    return allValid;
}
   // Helper function to convert base64 to Blob
 function base64ToBlob(base64, mime) {
     mime = mime || '';
     var sliceSize = 1024;
     var byteChars = window.atob(base64);
     var byteArrays = [];

     for (var offset = 0, len = byteChars.length; offset < len; offset += sliceSize) {
         var slice = byteChars.slice(offset, offset + sliceSize);
         var byteNumbers = new Array(slice.length);
         for (var i = 0; i < slice.length; i++) {
             byteNumbers[i] = slice.charCodeAt(i);
         }
         var byteArray = new Uint8Array(byteNumbers);
         byteArrays.push(byteArray);
     }

     return new Blob(byteArrays, {
         type: mime
     });
 }

 const imageInput = document.getElementById('pm-images');
 const imagesToCrop = document.getElementById('imagesToCrop');
 const imagePreview = document.getElementById('imagePreview');
 const cropperModal = document.getElementById('cropperModal');
 const cropperImage = document.getElementById('cropperImage');
 const cropButton = document.getElementById('cropButton');
 const closeModal = document.getElementById('closeModal');
 let cropper;
 let croppedImages = [];
 let currentImageIndex = 0;
 let selectedFiles = [];

 imageInput.addEventListener('change', function(event) {
     selectedFiles = Array.from(event.target.files);
     imagesToCrop.innerHTML = '';
     imagePreview.innerHTML = '';
     croppedImages = [];
     currentImageIndex = 0;

     selectedFiles.forEach((file, index) => {
         const img = document.createElement('img');
         img.src = URL.createObjectURL(file);
         img.style.width = '100px';
         img.style.height = '100px';
         img.style.marginRight = '10px';
         img.style.cursor = 'pointer';
         img.onclick = () => openCropModal(index);
         imagesToCrop.appendChild(img);
     });

     if (selectedFiles.length > 0) {
         openCropModal(0);
     }
 });

 function openCropModal(index) {
     currentImageIndex = index;
     const file = selectedFiles[index];
     const reader = new FileReader();

     reader.onload = function(e) {
         cropperImage.src = e.target.result;
         cropperModal.style.display = 'block';

         if (cropper) {
             cropper.destroy();
         }

         cropper = new Cropper(cropperImage, {
             aspectRatio: 1,
             viewMode: 1,
         });
     }

     reader.readAsDataURL(file);
 }

 cropButton.addEventListener('click', function() {
     const croppedCanvas = cropper.getCroppedCanvas();
     const croppedImageUrl = croppedCanvas.toDataURL('image/jpeg');

     croppedImages[currentImageIndex] = croppedImageUrl;

     const img = document.createElement('img');
     img.src = croppedImageUrl;
     img.style.width = '100px';
     img.style.height = '100px';
     img.style.marginRight = '10px';
     imagePreview.appendChild(img);

     cropperModal.style.display = 'none';
     cropper.destroy();

     // Move to next image if available
     if (currentImageIndex < selectedFiles.length - 1) {
         openCropModal(currentImageIndex + 1);
     }
 });

 closeModal.addEventListener('click', function() {
     cropperModal.style.display = 'none';
     if (cropper) {
         cropper.destroy();
     }
 });
const prodForm = document.getElementById('editProductForm')
 prodForm.addEventListener("submit", function(e) {
  e.preventDefault();
     // Validate offer selection
     // Validate offer selection
     const offerType = offerSelect.value;

// Validate offer value only if an offer type is selected
const offerValue = offerValueInput.value.trim();
if ((offerType === 'percentage' || offerType === 'flat') && offerValue === '') {
  alert('Please enter a valid offer value.');
  return;
}
if(offerType === 'percentage' && offerValue>90){
  alert('Cannot give offer more than 90%')
  return
}
if ((offerType === 'percentage' || offerType === 'flat') && offerValue <= 0) {
  alert('Offer value must be greater than 0.');
  return;
}
if(offerType==='percentage' || offerType === 'flat'){
 // Validate dates
 const startDate = new Date(offerStartDate.value);
    const endDate = new Date(offerEndDate.value);
    
    if (!offerStartDate.value) {
      alert('Please select a start date for the offer.');
      return;
    }
    if (!offerEndDate.value) {
      alert('Please select an end date for the offer.');
      return;
    }
    if (endDate < startDate) {
      alert('End date cannot be earlier than the start date.');
      return;
    }
}

    // Perform field validation
    const isNameValid = nameValidate();
    const isPriceValid = priceValidate();
    const isDescriptionValid = descriptionValidate();
    const isVersionValid = versionValidate();
    const isStockValid = stockValidate();

    // Stop form submission if any validation fails
    if (!isNameValid || !isPriceValid || !isDescriptionValid || !isVersionValid || !isStockValid) {
       
        return; // Stop further execution if validation fails
    }

    // Cropped image validation
    // if (croppedImages.length < 3) {
    //     alert('Please crop at least 3 images before submitting.');
    //     return;
    // }

    // Proceed with form submission via fetch
    const formData = new FormData(document.querySelector('#editProductForm'));
    formData.delete('productImage'); // Remove the original image files
    // Assuming platforms are selected dynamically, store them as an array in the formData
const platformElements = document.querySelectorAll('.platform-select');
let variants = [];
platformElements.forEach((element, index) => {
    const version = document.querySelector(`input[name="variant[${index}][version]"]`).value;
    const stock = document.querySelector(`input[name="variant[${index}][stock]"]`).value;
    const platform = element.value;
    
    variants.push({
        version,
        stock,
        platform
    });
});

// Add the variants array to formData as a stringified JSON
formData.append('variant', JSON.stringify(variants));


    try {
        // Append the cropped images to the FormData
        for (let i = 0; i < croppedImages.length; i++) {
            const base64Data = croppedImages[i].split(',')[1];
            const blob = base64ToBlob(base64Data, 'image/jpeg');
            formData.append('productImage', blob, `image${i + 1}.jpg`);
        }
      
       
        fetch('/admin/editProduct', {
            method: 'POST',
            body: formData
        }).then(response => {
            if (response.ok) {
                window.location.href = '/admin/productManagement';
            } else {
                response.text().then(errorText => {
                    console.error('Product creation failed:', errorText);
                    alert(`Product creation failed: ${errorText}`);
                });
            }
        }).catch(error => {
            console.error('Error:', error);
            alert(`An error occurred: ${error.message}`);
        });

    } catch (error) {
        console.error('Error:', error);
        alert(`An error occurred: ${error.message}`);
    }
});
})
   






    </script>
  
