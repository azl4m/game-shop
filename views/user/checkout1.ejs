<%- include("../partials/user/header.ejs")%>
<style>
  .container {
  background-color: #fff;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

h3 {
  font-family: 'Roboto', sans-serif;
  margin-bottom: 20px;
}

input[type="text"] {
  width: 100%;
  padding: 12px;
  margin: 10px 0;
  border: 1px solid #ccc;
  border-radius: 5px;
}

label {
  display: block;
  font-size: 14px;
  color: #333;
}

.btn {
  background-color: #4CAF50;
  color: white;
  padding: 12px;
  width: 100%;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  border: none;
  transition: background-color 0.3s ease;
}

.btn:hover {
  background-color: #45a049;
}

.toast {
  visibility: hidden;
  min-width: 250px;
  background-color: #333;
  color: #fff;
  text-align: center;
  padding: 16px;
  position: fixed;
  z-index: 1;
  left: 50%;
  bottom: 30px;
  font-size: 17px;
  border-radius: 5px;
  transform: translateX(-50%);
}

.toast.show {
  visibility: visible;
  animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

@keyframes fadein {
  from { bottom: 0; opacity: 0; }
  to { bottom: 30px; opacity: 1; }
}

@keyframes fadeout {
  from { bottom: 30px; opacity: 1; }
  to { bottom: 0; opacity: 0; }
}



  .toast {
  visibility: hidden;
  min-width: 250px;
  margin-left: -125px;
  color: white;
  text-align: center;
  border-radius: 2px;
  padding: 16px;
  position: fixed;
  z-index: 1;
  left: 50%;
  bottom: 30px;
  font-size: 17px;
}

/* Show the toast */
.toast.show {
  visibility: visible;
  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
  animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

/* Animations */
@-webkit-keyframes fadein {
  from {bottom: 0; opacity: 0;} 
  to {bottom: 30px; opacity: 1;}
}

@-webkit-keyframes fadeout {
  from {bottom: 30px; opacity: 1;} 
  to {bottom: 0; opacity: 0;}
}

@keyframes fadein {
  from {bottom: 0; opacity: 0;} 
  to {bottom: 30px; opacity: 1;}
}

@keyframes fadeout {
  from {bottom: 30px; opacity: 1;} 
  to {bottom: 0; opacity: 0;}
}

.zoom {
  position: absolute;
  border: 1px solid #000;
  width: 100px; /* Adjust size */
  height: 100px; /* Adjust size */
  background-repeat: no-repeat;
  background-size: 200%; /* Adjust to control zoom level */
  pointer-events: none;
  visibility: hidden;
}


</style>

<div class="row">
    <div class="col-75">
      <div class="container">
        <form id="checkoutForm">
          <div class="row">
            <!-- Billing Details -->
            <div class="col-50">
              <h3>Billing Address</h3>
              <div class="col-50">
                <div class="container">
                  <h2>Select Delivery Address</h2>
                  <form id="checkout-form" method="POST" action="/checkout">
                    <div>
                      <label for="address">Select Address:</label>
                      <select name="address" id="address">
                        <% addresses.forEach(function(address) { %>
                        <option
                          value="<%= address._id %>"
                          data-street="<%= address.street %>"
                          data-city="<%= address.city %>"
                          data-state="<%= address.state %>"
                          data-postalcode="<%= address.postalCode %>"
                          data-phone="<%= address.phoneNumber %>"
                          data-country="<%= address.country %>"
                        >
                          <%= address.street %>, <%= address.city %>, <%=
                          address.state %>, <%= address.postalCode %>
                        </option>
                        <% }) %>
                      </select>
                      <button class="btn-primary p-1" style="border: radius 50px; align-items: center; align-content: center;" ><a style="text-decoration: none; color: white;" href="/addressManagement?check=true">Add new address</a></button>
                    </div>
      
                    <!-- Add new address if user wants -->
                    <!-- <div>
                          <label for="new-address">Or Add New Address:</label>
                          <input
                            type="text"
                            name="newAddress"
                            id="new-address"
                            placeholder="Add a new address"
                          />
                        </div> -->
                  </form>
                </div>
              <!-- Address Form Fields -->
              <label for="fname"><i class="fa fa-user"></i> Full Name</label>
              <span class="error" id="error1"></span>
              <input type="text" id="fname" name="fname" value="<%= (userDetails.firstName && userDetails.lastName) ? (userDetails.firstName + ' ' + userDetails.lastName) : userDetails.username %>">
              <label for="email"><i class="fa fa-envelope"></i> Email</label>
              <span class="error" id="error2"></span>
              <input type="text" id="email" name="email" value="<%= userDetails.email %>">
              <!-- Add other form fields as necessary -->
            </div>
            
            <!-- Payment Mode Selection -->
            <div class="col-50">
              <h3>Payment</h3>
              <label for="payment-mode">Select Payment Mode:</label>
              <select id="payment-mode" name="payment-mode">
                <option value="">Select a Payment Mode</option>
                <option value="razorpay">Razorpay</option>
                <option value="cod">Cash On Delivery</option>
              </select>
              <!-- Payment Details (Shown for Razorpay) -->
            <div id="paymentDetails" style="display: none;">
              <label for="fname">Accepted Cards via Razorpay</label>
              <div class="icon-container">
                <i class="fa fa-cc-visa" style="color: navy"></i>
                <i class="fa fa-cc-mastercard" style="color: red"></i>
                <i class="fa fa-cc-amex" style="color: blue"></i>
                <i class="fa fa-cc-discover" style="color: orange"></i>
              </div>
            </div>
            </div>
          </div>
          <div class="container">
            <h4>
              Cart
              <span class="price" style="color: black">
                <i class="fa fa-shopping-cart"></i>
                <b><%=products.length%></b>
              </span>
            </h4>
            <%products.forEach(product=>{%>
            <p>
              <%=product.name%> <%=product.platform%> <span class="price"><%=product.price%></span>
              <span>X</span>
            <span class="price"><%=product.quantity%> </span>
            </p>
            <%})%>
            <hr />
            <table>
                <tr>
                    <td>Delivery</td>
                    <td><span class="price" style="color: black" id="delivery"><%=delivery%></span></td>
                </tr>
                <tr>
                    <td>
                        <p>Tax</p>
                    </td>
                    <td><span class="price" style="color: black"><b id="tax"><%=tax%></b></span></td>
                </tr>
                <tr></tr>
                    <td>
                        <p>Total</p>
                    </td>
                    <td><span class="price" style="color: black"><b id="totalPrice"><%=total%></b></span></td>
                </tr>
            </table>
          </div>
        </div>
          <label>
            <input type="checkbox" checked="checked" name="sameadr"> Shipping address same as billing
          </label>
          <button type="submit" class="btn" id="submitLink">Proceed to order</button>
        </form>
      </div>
    </div>
  </div>
  
  <div id="toast" class="toast"></div>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
// for toast
function showToast(data, result) {
    // toast.className.replace("show","");
    const toast = document.getElementById("toast");
    toast.className = "toast show";
    toast.innerHTML = data
    if (result) {
        toast.style.backgroundColor = "#4CAF50"
    } else {
        toast.style.backgroundColor = "red"
    }
    setTimeout(() => {
        toast.className = toast.className.replace("show", "");
    }, 3000); // The toast will disappear after 3 seconds
}

document.getElementById('payment-mode').addEventListener('change', function() {
    const paymentDetails = document.getElementById('paymentDetails');
    if (this.value === 'razorpay') {
        paymentDetails.style.display = 'block';
    } else {
        paymentDetails.style.display = 'none';
    }
});

// Function to display error messages
function displayError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.color = 'red';
}

// Function to clear previous errors
function clearErrors() {
    const errorFields = document.querySelectorAll('.error');
    errorFields.forEach(function(errorField) {
        errorField.innerText = ''; // Clear error text
    });
}

document.addEventListener("DOMContentLoaded", function() {
    const addressSelect = document.getElementById("address");




    // Get form fields
    const emailField = document.getElementById("email");
    const nameField = document.getElementById("fname");
    const priceField = document.getElementById('totalPrice')
    // const addressField = document.getElementById("address")
    const paymentMode = document.getElementById('payment-mode')


    addressSelect.addEventListener("change", function() {
        // Get selected option's dataset values
        const selectedOption = addressSelect.options[addressSelect.selectedIndex];

        const street = selectedOption.getAttribute("data-street");
        const city = selectedOption.getAttribute("data-city");
        const state = selectedOption.getAttribute("data-state");
        const postalCode = selectedOption.getAttribute("data-postalcode");
        const phone = selectedOption.getAttribute("data-phone");
        const country = selectedOption.getAttribute("data-country");
    });

    const submitLink = document.getElementById("submitLink");

    submitLink.addEventListener("click", async (event) => {
        event.preventDefault();


        //for validation

        const error1 = document.getElementById('error1')
        const error2 = document.getElementById('error2')


        const emailVal = emailField.value;
        const nameVal = nameField.value;
        const priceVal = priceField.innerHTML
        // const addressVal = addressField.value
        const paymentVal = paymentMode.value
        const nameRegex = /^[A-Za-z\s]+$/;
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const phoneRegex = /^\d{10}$/;



        let isValid = true;


        // Validate Full Name
        if (!nameRegex.test(nameVal)) {
            displayError('error1', 'Full Name should only contain letters and spaces.');
            isValid = false;
        }

        // Validate Email
        if (!emailRegex.test(emailVal)) {
            displayError('error2', 'Please enter a valid email.');
            isValid = false;
        }
        if (paymentVal === "") {
            showToast("Please Select A Payment Mode", 0)
            isValid = false
        }
        // Validate Street Address

        if (!isValid) {
            return; // If validation fails, stop further processing (i.e., prevent fetch)
        }
        const addressField = document.getElementById("address")
        const addressid = addressField.value
        try {
            const response = await fetch(`/checkout`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    paymentMode: paymentVal,
                    totalPrice:parseInt(priceVal),
                    address:addressid,
                    fname: nameVal,  // Sending fname (full name)
                }),
            });
            const data = await response.json()
            if (paymentVal === "cod" && response.ok) {
                showToast("Order Placed", 1)
                setTimeout(() => {
                    window.location.href = "/orderSuccess"
                }, 2000);
            } else if (paymentVal === "razorpay" && data.razorpayOrderId) {
                const options = {
                    key: data.razorpayKeyId,
                    amount: data.amount,
                    currency: 'INR',
                    name: "The Game Shop",
                    description: "Test Transaction",
                    order_id: data.razorpayOrderId,
                    handler: async function(response) {
                        try {
                            const verifyResponse = await fetch("/verifyPayment", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: data.orderId, // Your backend order ID
                                })
                            })
                            const verifyData = await verifyResponse.json()
                            console.log(verifyData);
                            
                            if (verifyData.success) {
                                showToast("Payment Successfull, Order Placed", 1)
                                setTimeout(() => {
                                    window.location.href = "/orderSuccess"
                                }, 2000);
                            } else {
                                alert("Payment Verification failed, Please try again")
                            }
                        } catch (error) {
                            console.error("Error verifying payment:", error.message);
                            alert("Error verifying payment. Please try again.");
                        }
                    },
                    prefill: {
                        name: data.name,
                        email: data.email
                    },
                    theme: {
                        color: "#3399cc",
                    },
                };

                const rzp = new Razorpay(options);
                rzp.open()
            } else {
                // Handle any other errors
                alert(data.message || "Something went wrong");
            }
        } catch (error) {
            alert(error.message)
            console.error(error.message)

        }


    });
});
</script>     
       

<%- include("../partials/user/footer.ejs")%>
