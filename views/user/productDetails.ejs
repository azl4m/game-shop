<%- include("../partials/user/header.ejs")%>
<style>
    /* Toast notification styles */
.toast {
  visibility: hidden;
  min-width: 250px;
  margin-left: -125px;
  color: white;
  text-align: center;
  border-radius: 2px;
  padding: 16px;
  position: fixed;
  z-index: 1;
  left: 50%;
  bottom: 30px;
  font-size: 17px;
}

/* Show the toast */
.toast.show {
  visibility: visible;
  -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
  animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

/* Animations */
@-webkit-keyframes fadein {
  from {bottom: 0; opacity: 0;} 
  to {bottom: 30px; opacity: 1;}
}

@-webkit-keyframes fadeout {
  from {bottom: 30px; opacity: 1;} 
  to {bottom: 0; opacity: 0;}
}

@keyframes fadein {
  from {bottom: 0; opacity: 0;} 
  to {bottom: 30px; opacity: 1;}
}

@keyframes fadeout {
  from {bottom: 30px; opacity: 1;} 
  to {bottom: 0; opacity: 0;}
}

.zoom {
  position: absolute;
  border: 1px solid #000;
  width: 100px; /* Adjust size */
  height: 100px; /* Adjust size */
  background-repeat: no-repeat;
  background-size: 200%; /* Adjust to control zoom level */
  pointer-events: none;
  visibility: hidden;
}
.existing-reviews-container {
    margin-top: 30px;
    padding: 20px;
    background: #f8f9fa;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .review {
    margin-bottom: 15px;
    padding: 10px;
    border-bottom: 1px solid #e0e0e0;
  }

  .star-rating {
    color: #f39c12; /* Star color */
  }

  .star-rating .selected {
    color: #e67e22; /* Selected star color */
  }

  .review-comment {
    margin: 10px 0;
    font-style: italic;
  }

  .review-date {
    color: #888;
  }

</style>
<div class="template-small-container single-product">
    <div class="template-row">
        <div class="template-col-2">
          <div class="img-container" style="position: relative; width: 100%; max-width: 400px;">
            <img src="<%=product.images[0]%>" width="100%" id="ProductImg" style="max-width: 100%; object-fit: contain;" >
            <div class="zoom" id="zoomLens" style="visibility: hidden; position: absolute; width: 100px; height: 100px; border: 1px solid #d3d3d3;">

            </div>
          </div>
            

            <div class="small-img-row">
                <%for(let i=0;i<product.images.length;i++){%>
                <div class="small-img-col">
                    <img src="<%=product.images[i]%>" width="100%" class="small-img" data-large="<%= product.images[i] %>">
                </div>
                <%}%>
            </div>

        </div>
        <div class="template-col-2">
            <p>Home / <%=product.productName%></p>
            <h1><%=product.productName%></h1>
            <!-- <h4>₹<%=product.price%></h4> -->
            <% if (discountedPrice < product.price) { %>
              <% if (offerSelected === "product") { %>
                <h4>Applied Offer: <%= appliedOfferType === 'percentage' ? productOfferValue + '%' : '₹' + productOfferValue %> discount</h4>
                <h3>Discounted Price: ₹<%= discountedPrice.toFixed(2) %></h3>
              <% } else if (offerSelected === "category") { %>
                <h4>Applied Offer: <%= appliedOfferType === 'percentage' ? categoryOfferValue + '%' : '₹' + categoryOfferValue %> discount</h4>
                <h3>Discounted Price: ₹<%= discountedPrice.toFixed(2) %></h3>
              <% } %>
            <% } else { %>
              <h4>Price: ₹<%= product.offerPrice %></h4>
            <% } %>
            
            <select id="variantSelect">
                <option>Select Variant</option>
                <% platforms.forEach(function(platform) { %>
                <% if (platform !== null) { %>
                    <option id="platform" value="<%=platform._id%>"><%= platform._id %></option>
                <% } %>
                <% }); %>
            </select>
            <input type="number" value="1" id="quantity">
            <a href="#" id="addToCartBtn" class="template-btn" style="text-decoration: none;">Add To Cart</a>
            <a href="#" id="addToWishListBtn" class="template-btn" style="text-decoration: none;">Add To Wishlist</a>
            <h3>Product Details <i class="template-fa template-fa-indent"></i></h3>
            <br>
            <p><%=product.description%></p>
            <p style="color: red;" id="stockDisplay"></p>
            <p hidden id="stock"></p>
        </div>
    </div>
</div>
<div class="template-small-container">
  <div class="existing-reviews-container">
    <!-- Flash messages -->
  <% if (messages.success) { %>
    <div class="alert alert-success"><%= messages.success %></div>
    <% } %> <% if (messages.error) { %>
    <div class="alert alert-danger"><%= messages.error %></div>
    <% } %>
  
    <h3>Product Reviews</h3>
    <!-- Button to add a new review -->
    <div class="text-end mb-3">
      <a href="/addNewReview?productId=<%= product._id %>" data-href="/addNewReview?productId=<%= product._id %>" id="addnewreview" class="btn btn-primary">Add a New Review</a>
    </div>
    <div id="reviewsList">
      <% if (product.reviews.length > 0) { %>
        <% product.reviews.forEach(review => { %>
          <div class="review">
            <div class="review-header">
              <strong>User: <%= review.user.username %></strong>
              <div class="star-rating">
                <% for (let i = 1; i <= 5; i++) { %>
                  <i class="fa-star <%= i <= review.rating ? 'fas selected' : 'far' %>"></i>

                <% } %>
              </div>
            </div>
            <p class="review-comment"><%= review.comment %></p>
            <p class="review-date"><small>Reviewed on: <%= review.createdAt.toLocaleDateString() %></small></p>
          </div>
        <% }) %>
      <% } else { %>
        <p>No reviews yet. Be the first to leave a review!</p>
      <% } %>
    </div>
  </div>
</div>

<!-- title -->
<div class="template-small-container">
    <div class="template-row template-row-2">
        <h2>Related Products</h2>
        <p>View More</p>
    </div>
</div>
<div id="toast" class="toast">
  </div>
  
<!-- Products -->
 <%if(typeof relatedProducts!== "undefined"){%>
<div class="template-small-container">
    <div class="template-row">
      <%relatedProducts.forEach(product=>{%>
        <div class="template-col-4">
            <img src="<%=product.images[0]%>">
            <h4><%=product.productName%></h4>
           
            <p>₹ <%=product.price%></p>
        </div>
        <%})%
    </div>
</div>
<%}%>
<script>
    // Function to show the toast notification
function showToast(data,result) {
  // toast.className.replace("show","");
  const toast = document.getElementById("toast");
  toast.className = "toast show";
  toast.innerHTML = data
  if(result){
    toast.style.backgroundColor = "#4CAF50"
  }
  else{
    toast.style.backgroundColor = "red"
  }
  setTimeout(() => {
    toast.className = toast.className.replace("show", "");
  }, 3000); // The toast will disappear after 3 seconds
}

document.addEventListener('DOMContentLoaded', function () {
    const quantityInput = document.getElementById('quantity');
    const addToCartBtn = document.getElementById('addToCartBtn');
    const addToWishListBtn = document.getElementById('addToWishListBtn')
    const variantSelect = document.getElementById('variantSelect'); // Select element for platform
    const stockDisplay = document.getElementById('stockDisplay'); 
    const stock = document.getElementById("stock")
    const productId = '<%= product._id %>';
    console.log(stock.innerHTML);
    
    if(parseInt(stock.innerHTML)===0){
      addToCartBtn.disabled = true
    } 

    function updateAddToCartLink() {
        const quantity = quantityInput.value;
        if(quantity>parseInt(stock.innerHTML)){
          quantityInput.value=parseInt(stock.innerHTML)
        }
        if(quantity<=0){
          quantityInput.value = 1
        }
        else if(quantity>5){
          quantityInput.value = 5
        }
        const platform = variantSelect.value; // Get selected platform from dropdown
        if (platform !== "Select Variant") {
            const baseUrl = '/addToCart';
            const baseUrl1 = "/addToWishlist"
            addToCartBtn.setAttribute('data-href', `${baseUrl}?id=${productId}&quantity=${quantity}&platform=${platform}`);
            addToWishListBtn.setAttribute('data-href',`${baseUrl1}?id=${productId}&platform=${platform}`)
        } else {
            addToCartBtn.setAttribute('data-href', '#'); // Disable link if platform is invalid      
        }
    }

    // Fetch stock when platform is selected
    async function fetchStockForPlatform(platform) {
      const url = `/getPlatformStock?productId=${productId}&platform=${platform}`;
      try {
        const response = await fetch(url);
        const data = await response.json();
        if (response.ok) {
          stockDisplay.textContent = `Stock Available: ${data.stock}`; // Display stock details
          stock.innerHTML=data.stock
        } else {
          stockDisplay.textContent = "Stock not available for selected platform";
        }
      } catch (error) {
        console.error('Error fetching stock:', error);
        stockDisplay.textContent = "Error fetching stock";
      }
    }

        // Update link and fetch stock on platform change
        variantSelect.addEventListener('change', function() {
      const platform = variantSelect.value;
      if (platform !== "Select Variant") {
        fetchStockForPlatform(platform); // Fetch stock when a platform is selected
      } else {
        stockDisplay.textContent = ""; // Clear stock display when no platform is selected
      }
      updateAddToCartLink();
    });
    
    // Update link on quantity or platform change
    quantityInput.addEventListener('input', updateAddToCartLink);
    variantSelect.addEventListener('change', updateAddToCartLink);

    // Initial update
    updateAddToCartLink();
});

document.addEventListener('DOMContentLoaded', () => {
    const addToCartButton = document.getElementById('addToCartBtn');

    addToCartButton.addEventListener('click', async (event) => {
      event.preventDefault()
      
      const platform = document.getElementById('variantSelect').value;

      // Check if platform is valid before making the request
      if (platform === "Select Variant") {
        showToast("Please select a platform",0)
        return;
      }

      const url = addToCartButton.getAttribute('data-href'); // Fetch URL stored in data-href
      try {
        const response = await fetch(url);
        if (response.ok) {
          const data = await response.json();
          showToast(data.message||"Product added succesfully !",1) // Show toast notification
          setTimeout(() => {
            window.location.href = data.redirectUrl; // Redirect after a delay
          }, 2000); // 2-second delay before redirecting
        }
        else{
          const data = await response.json()
          showToast(data.message||"Error adding product",0)
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
      }
    });
});


document.addEventListener('DOMContentLoaded', function () {
    const productImg = document.getElementById('ProductImg');
    const zoomLens = document.getElementById('zoomLens');
    const smallImages = document.querySelectorAll('.small-img');

    // Function to set the zoom lens image and main image
    function setZoomImage(src) {
        productImg.src = src;
        zoomLens.style.backgroundImage = `url(${src})`;
    }

    // Function to handle zoom
    function zoom(e) {
        const rect = productImg.getBoundingClientRect();
        const x = e.clientX - rect.left; // Get mouse X position relative to the image
        const y = e.clientY - rect.top;  // Get mouse Y position relative to the image

        // Ensure the cursor is inside the image bounds
        if (x < 0 || y < 0 || x > productImg.offsetWidth || y > productImg.offsetHeight) {
            zoomLens.style.visibility = 'hidden'; // Hide the zoom lens if outside the image
            return;
        } else {
            zoomLens.style.visibility = 'visible'; // Show the zoom lens
        }

        // Calculate the position of the zoom lens
        let lensX = x - zoomLens.offsetWidth / 2;
        let lensY = y - zoomLens.offsetHeight / 2;

        // Restrict the lens within image bounds
        lensX = Math.max(0, Math.min(lensX, productImg.offsetWidth - zoomLens.offsetWidth));
        lensY = Math.max(0, Math.min(lensY, productImg.offsetHeight - zoomLens.offsetHeight));

        // Move the zoom lens
        zoomLens.style.left = `${lensX}px`;
        zoomLens.style.top = `${lensY}px`;

        // Calculate zoom ratio based on background size
        const zoomFactor = 2; // You can adjust the zoom factor
        zoomLens.style.backgroundSize = `${productImg.offsetWidth * zoomFactor}px ${productImg.offsetHeight * zoomFactor}px`;

        // Set the background position for zoom effect
        const bgPosX = (lensX / productImg.offsetWidth) * 100;
        const bgPosY = (lensY / productImg.offsetHeight) * 100;
        zoomLens.style.backgroundPosition = `${bgPosX}% ${bgPosY}%`;
    }

    // Initialize zoom on the main image
    function initZoom() {
        productImg.addEventListener('mousemove', zoom);
        productImg.addEventListener('mouseenter', () => zoomLens.style.visibility = 'visible');
        productImg.addEventListener('mouseleave', () => zoomLens.style.visibility = 'hidden');
    }

    // Add click event listener to each thumbnail
    smallImages.forEach(thumbnail => {
        thumbnail.addEventListener('click', function () {
            const newSrc = thumbnail.src;
            setZoomImage(newSrc);
        });
    });

    // Initialize the zoom effect
    initZoom();
});

document.addEventListener('DOMContentLoaded',function(){
      const addToWishListBtn = document.getElementById("addToWishListBtn")
      const productId = '<%= product._id %>';
      const platform = document.getElementById('variantSelect').value;      
      addToWishListBtn.addEventListener('click',async(event)=>{
        const platformVal = document.getElementById('variantSelect').value;
        event.preventDefault()

// Check if platform is valid before making the request
if (platformVal === "Select Variant") {
  showToast("Please select a platform",0)
  return;
}

        const url = addToWishListBtn.getAttribute('data-href'); // Fetch URL stored in data-href
      
      try {
        const response = await fetch(url);
        if (response.ok) {
          const data = await response.json();
          showToast(data.message||"Product added succesfully !",1) // Show toast notification
          setTimeout(() => {
            window.location.href = data.redirectUrl; // Redirect after a delay
          }, 2000); // 2-second delay before redirecting
        }
        else{
          const data = await response.json();
          showToast(data.message||"Error adding product",0)
          setTimeout(()=>{
            window.location.href = data.redirectUrl
          },2000)
        }
      } catch (error) {
        console.error('Error adding to wishlist:', error);
      }
      })
      
    })

document.addEventListener("DOMContentLoaded",async()=>{
  const addNewReview = document.getElementById("addnewreview")
  const url = addNewReview.getAttribute("data-href")
  addNewReview.addEventListener("click",async(e)=>{
    console.log(url);
    
    e.preventDefault()
    try {
      const response = await fetch(url)
    if(response.ok){
      const data = await response.json()
      if(data.redirectUrl){
        window.location.href=data.redirectUrl
      }
      else{
        showToast(data.message,0)
      }
    }  
    } catch (error) {
      
    }
    
  })
  
})

</script>

<%- include("../partials/user/footer.ejs")%>
